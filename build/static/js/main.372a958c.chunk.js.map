{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","response","id","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","useEffect","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","htmlFor","onChange","target","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.372a958c.chunk.js","sourcesContent":["import React from 'react'\n\n// RAFC Boilerplate\nexport const Header = () => {\n    return (\n        <h2>\n          Expense Tracker  \n        </h2>\n    )\n}\n","// the bare minimum we need for our reducer\n// Again - a reducer is just a way to change the state and send it down to your components or application\nexport default (state, action) => {\n    switch(action.type) { // this switched is based on the type which is basically like an id\n        case 'GET_TRANSACTIONS':\n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload\n            }\n        case 'DELETE_TRANSACTION':\n        return {\n            ...state,\n            transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n        }\n        case 'ADD_TRANSACTION': // can use the reducer to send things down and also send things up in this case - sending up new transaction to AddTransaction.js\n            return {\n                ...state,\n                transactions: [...state.transactions, action.payload]\n            }\n        case 'TRANSACTION_ERROR':\n            return {\n                ...state,\n                error: action.payload \n            }\n        default:\n            return state; // when it's default, we simply want to return our state as is\n    }\n}","// we want createContext to create the context API we need, and useReducer because we need our usual reducer\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\n// Initial State - any global state would go in this object\n// In this case, all we need is transactions because as long as we have access to the transactions,\n// in certain components we can do our calculations (balance, etc.)\nconst initialState = {\n    transactions: [],\n    error: null,\n    loading: true\n        // these were the  dummy transactions to test code (from VJS repo)\n        // expenses are negative, income is positive                   \n}\n\n// Create context\nexport const GlobalContext = createContext(initialState); // allows us to use in other files\n\n// In order for our other components to access the GlobalContext, we need what's called a 'provider'\n// We need to wrap all our components in the provider component\n\n// Provider component\n// we use destructuring for the children because the components we're wrapping are technically children \nexport const GlobalProvider = ({ children }) => { \n    // this is where we use the useReducer because we need access to the state and dispatch\n    // whenever we call a reducer action, we need to use the dispatch key\n    // useReducer then takes the file (which we haven't made yet) and the initialState\n    const[state, dispatch] = useReducer(AppReducer, initialState);\n    // This is our provider - it provides our state or any actions to the components that it's wrapped around\n\n    // Actions - these make calls to the reducer\n    async function getTransactions(){\n        try {\n          const res = await axios.get('/api/v1/transactions');\n\n          dispatch({\n              type: 'GET_TRANSACTIONS',\n              payload: res.data.data\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n        }); \n        }\n    }\n\n    async function deleteTransaction(id) {\n        try {\n          await axios.delete(`/api/v1/transactions/${id}`);\n\n          dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          })   \n        }\n    }\n    // dispatches to our reducer an object \n    async function addTransaction(transaction) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        try {\n           const res = await axios.post('/api/v1/transactions', transaction, config);\n           \n          dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: res.data.data // any data we want ot send to it\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          })     \n        }\n    }\n\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions, // this is how you access the initialState above (where our dummy code lives)\n        error: state.error,\n        loading: state.loading,\n        getTransactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {/* then we pass in the children prop */}\n        {children}\n    </GlobalContext.Provider>);\n}\n\n","export function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React, { useContext } from 'react' // these are basically like the math import and others that we use in Python\nimport { GlobalContext } from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format'\n\nexport const Balance = () => { // this is where the logic lives\n    const { transactions } = useContext(GlobalContext);\n\n    const amounts = transactions.map(transaction => transaction.amount);\n    \n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n    // this is what we're ultimately returning. Basically like the return in Python\n    return (\n        <>\n          <h4>Your Balance</h4>\n          <h1>${numberWithCommas(total)}</h1>\n        </>\n    )\n}\n\n\n\n","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport const IncomeExpenses = () => { // logic we're using \n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const income = amounts\n    .filter(item => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = (\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n  ).toFixed(2);\n    // what we ultimately want to return to the DOM\n    return (\n        <div className=\"inc-exp-container\">\n        <div>\n          <h4>Income</h4>\n          <p className=\"money plus\">${numberWithCommas(income)}</p>\n        </div>\n        <div>\n          <h4>Expense</h4>\n          <p className=\"money minus\">${numberWithCommas(expense)}</p>\n        </div>\n      </div>\n    )\n}\n","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport const Transaction = ({ transaction }) => {\n    const { deleteTransaction } = useContext(GlobalContext); // our delete logic\n\n    const sign = transaction.amount < 0 ? '-' : '+'; // to change the color depending on debit or credit\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}> \n          {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span><button // pass in the above logic in the return statement\n          onClick={() => deleteTransaction(transaction._id)} className=\"delete-btn\">x</button> \n        </li>\n        // what we return for the delete transaction in the DOM ^\n    )\n}\n","import React, { useContext, useEffect } from 'react';\nimport { Transaction } from './Transaction';\n\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const TransactionList = () => {\n    const { transactions, getTransactions } = useContext(GlobalContext); // this basically pulls in our dummy data to the component using the global context in GlobalState file\n    // above also uses destructuring of the transactions context\n\n    useEffect(() => {\n      getTransactions();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    \n    return (\n        <>\n        <h3>History</h3>\n        {/* logic for our transaction list */}\n        <ul className=\"list\"> \n        {/* needs to know which transaction to render so we pass it in as props */}\n        {/* then it needs to have a unique key */}\n          {transactions.map(transaction => (<Transaction key={transaction.id} transaction={transaction} /> ))} \n        </ul>\n        </>\n    )\n}\n","import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\n\nexport const AddTransaction = () => {\n    // Need to create a piece of state (text) then the function to manipulate that state (setText)\n    // Then set that to useState and add in what you want for a default argument ('')\n    // Then do the same for the amount\n    // Then we connect up to our input by using the value element and an onChange so that it updates to what we want\n    // Then you can check inside the components section of devTools to make sure that when you type\n    // something into the inputs that it's working\n    const [text, setText] = useState('');\n    const [amount, setAmount] = useState(0);\n\n    const { addTransaction } = useContext(GlobalContext); // from the reducer \n\n    const onSubmit = e => {\n      e.preventDefault();\n\n      const newTransaction = {\n        text,\n        amount: +amount // this turns the amount into a number (was previously a string)\n      }\n\n      addTransaction(newTransaction); // listed as new transaction in the logic\n    }\n\n    return (\n        <>\n      <h3>Add new transaction</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} // plugs in our state and what we want to check for (onchange)\n          placeholder=\"Enter text...\" />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\"\n            >Amount <br />\n            (negative - expense, positive - income)</label\n          >\n          <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n        </>\n    )\n}\n","import React from \"react\";\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\nimport { AddTransaction } from './components/AddTransaction';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n  <GlobalProvider>\n    <Header />\n    <div className=\"container\">\n      <Balance />\n      <IncomeExpenses />\n      <TransactionList />\n      <AddTransaction />\n    </div>\n  </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}